# Parameters
nc: 2  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-resnet50.yaml' will call yolov8-resnet50.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

backbone:
  # [from, repeats, module, args]
  # ResNetLayer(args: input_channels, output_channels, stride, is_first:bool, n_blocks)
  - [-1, 1, ResNetLayer, [3, 64, 1, True, 1]]  # 0 P1/2 | output_size: 64, 160, 160
  - [-1, 1, ResNetLayer, [64, 64, 1, False, 3]]  # 1 P2/4 | output_size: 256, 160, 160
  - [-1, 1, ResNetLayer, [256, 128, 2, False, 4]]  # 2 P3/8 | output_size: 512, 80, 80
  - [-1, 1, ResNetLayer, [512, 256, 2, False, 6]]  # 3 P4/16 | output_size: 1024, 40, 40
  - [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]]  # 4 P5/32 | output_size: 2048, 20, 20
  - [-1, 1, SPPF, [2048, 5]]  # 5 | output_size: 2048, 20, 20
  
# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 6 | output_size: 2048, 40, 40
  - [[-1, 3], 1, Concat, [1]]  # cat backbone P4 | output_size: 3072, 40, 40
  - [-1, 3, C2f, [512]]  # 8 | output_size: 512, 40, 40

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 9 | output_size: 512, 80, 80
  - [[-1, 2], 1, Concat, [1]]  # cat backbone P3 | output_size: 1024, 80, 80
  - [-1, 3, C2f, [256]]  # 11 (P3/8-small) | output_size: 256, 80, 80

  - [-1, 1, Conv, [256, 3, 2]]  # 12 | output_size: 256, 40, 40
  - [[-1, 8], 1, Concat, [1]]  # cat head P4 | output_size: 768, 40, 40
  - [-1, 3, C2f, [512]]  # 14 (P4/16-medium) | output_size: 512, 40, 40

  - [-1, 1, Conv, [512, 3, 2]]  # 15 | output_size: 512, 20, 20
  - [[-1, 5], 1, Concat, [1]]  # cat head P5 | output_size: 2560, 20, 20
  - [-1, 3, C2f, [1024]]  # 17 (P5/32-large) | output_size: 1024, 20, 20

  - [[11, 14, 17], 1, Detect, [nc]]  # Detect(P3, P4, P5)
