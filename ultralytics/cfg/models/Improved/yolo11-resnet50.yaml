# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO11 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolo11n-resnet50.yaml' will call yolo11-resnet50.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024] # summary: 319 layers, 2624080 parameters, 2624064 gradients, 6.6 GFLOPs
  s: [0.50, 0.50, 1024] # summary: 319 layers, 9458752 parameters, 9458736 gradients, 21.7 GFLOPs
  m: [0.50, 1.00, 512] # summary: 409 layers, 20114688 parameters, 20114672 gradients, 68.5 GFLOPs
  l: [1.00, 1.00, 512] # summary: 631 layers, 25372160 parameters, 25372144 gradients, 87.6 GFLOPs
  x: [1.00, 1.50, 512] # summary: 631 layers, 56966176 parameters, 56966160 gradients, 196.0 GFLOPs

# YOLO11 backbone
backbone:
  # [from, repeats, module, args]
  # ResNetLayer(args: input_channels, output_channels, stride, is_first:bool, n_blocks)
  - [-1, 1, ResNetLayer, [3, 64, 1, True, 1]]       # 0 P1/2 | output_size: 64, 160, 160
  - [-1, 1, ResNetLayer, [64, 64, 1, False, 3]]     # 1 P2/4 | output_size: 256, 160, 160
  - [-1, 1, ResNetLayer, [256, 128, 2, False, 4]]   # 2 P3/8 | output_size: 512, 80, 80
  - [-1, 1, ResNetLayer, [512, 256, 2, False, 6]]   # 3 P4/16 | output_size: 1024, 40, 40
  - [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]]  # 4 P5/32 | output_size: 2048, 20, 20
  - [-1, 1, SPPF, [2048, 5]]                        # 5 | output_size: 2048, 20, 20
  - [-1, 2, C2PSA, [2048]]                          # 6 | output_size: 2048, 20, 20
  
# YOLO11 head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]      # 7 | output_size: 2048, 40, 40
  - [[-1, 3], 1, Concat, [1]]                       # cat backbone P4 | output_size: 3072, 40, 40
  - [-1, 2, C3k2, [512, False]]                     # 9 | output_size: 512, 40, 40

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]      # 10 | output_size: 512, 80, 80
  - [[-1, 2], 1, Concat, [1]]                       # cat backbone P3 | output_size: 1024, 80, 80
  - [-1, 2, C3k2, [256, False]]                     # 12 (P3/8-small) | output_size: 256, 80, 80

  - [-1, 1, Conv, [256, 3, 2]]                      # 13 | output_size: 256, 40, 40
  - [[-1, 9], 1, Concat, [1]]                       # cat head P4 | output_size: 768, 40, 40
  - [-1, 2, C3k2, [512, False]]                     # 15 (P4/16-medium) | output_size: 512, 40, 40

  - [-1, 1, Conv, [512, 3, 2]]                      # 16 | output_size: 512, 20, 20
  - [[-1, 6], 1, Concat, [1]]                       # cat head P5 | output_size: 2560, 20, 20
  - [-1, 2, C3k2, [1024, True]]                     # 18 (P5/32-large) | output_size: 1024, 20, 20

  - [[12, 15, 18], 1, Detect, [nc]]                 # Detect(P3, P4, P5)
